using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MapManager : MonoBehaviour
{
    #region Singleton

    public static MapManager instance;

    private void Awake()
    {
        instance = this;
    }

    #endregion

    [Header("Admin")]
    public GameObject player;

    [Header("Objectives")]
    public float doorHealth;
    public float doorStartHealth;
    public float wallHealth;

    public GameObject[] woodPlanks;
    public bool[] woodPlanksLastFrame;

    [Header("Enemies")]
    public float lightEnemyChance;

    public float shhEnemyChance;
    public bool shhEnemyActive;
    public float shhEnemyTimeActive;
    public float shhEnemyThreshhold;

    public float wallCrumblerChance;
    public bool wallCrumberActive;
    public float wallCrumberTimeActive;
    public float wallCrumberThreshhold;

    public float darkCreeperChance;
    public bool darkCreeperActive;
    public float darkCreeperTimeActive;
    public float darkCreeperThreshhold;

    [Header("Lights")]
    public float powerLevel;
    public float flickerRate;
    public bool flickering;
    public bool lightState;
    public GameObject[] lights;

    [Header("Sounds")]
    public AudioClip woodBreak;
    public AudioClip woodBuild;

    private void Update()
    {
        #region Lights
        //Run out of Power
        if(powerLevel <= 0){lightState = false;}

        //Control Lights based of bool
        for(int i = 0; i < lights.Length; i++)
        {
            if (!flickering) { lights[i].SetActive(lightState); }
            else { lights[i].SetActive(false); }
        }

        //Flicker
        if(!flickering && Random.Range(0f,1f) <= flickerRate && lightState) {flickering = true;}
        if(flickering && Random.Range(0f,1f) <= .01f) {flickering = false;}
        #endregion
        #region Enemies
        #region LightEnemy
        if (Random.Range(0f, 1f) <= lightEnemyChance)
        {
            lightState = false;
        }
        #endregion
        #region ShhEnemy
        if (shhEnemyActive)
        {
            shhEnemyTimeActive += .01f;
            if (shhEnemyTimeActive >= shhEnemyThreshhold) { shhEnemyActive = false; GameManager.instance.PlaySoundGlobal(enemyLeave); }
        }
        else if (Random.Range(0f, 1f) <= shhEnemyThreshhold) { shhEnemyActive = true; GameManager.instance.PlaySoundGlobal(ShhEnemyActive); }
        #endregion
        #region WallCrumber
        if (wallCrumberActive)
        {
            wallHealth -= .001f;
            if (1 >= wallCrumberThreshhold) { wallCrumberActive = false; }
        }
        else if (Random.Range(0f, 1f) <= wallCrumblerChance) { wallCrumberActive = true; }
        #endregion
        #region DarkCreeper
        if (darkCreeperActive)
        {
            shhEnemyTimeActive += .01f;
            if (darkCreeperTimeActive >= darkCreeperThreshhold) { darkCreeperActive = false;
            if(lightState){GameManager.instance.PlaySoundGlobal(playerDieSound);} else{GameManager.instance.PlaySoundGlobal(darkCreeperLeave);}
            }
        }
        else if (Random.Range(0f, 1f) <= darkCreeperChance) { darkCreeperActive = true; GameManager.instance.PlaySoundGlobal(darkCreeperSummon);}
        #endregion
        #endregion
        #region Door
        if(!player.GetComponent<PlayerController>().repairing)
        {
            doorHealth -= .005f;
        }else{doorHealth += .01f; }

        for(int i = 0; i < woodPlanks.Length; i++)
        {
            woodPlanks[i].SetActive(false);
            if (doorHealth >= (doorStartHealth * .25f) * (i + 1))
            {
                woodPlanks[i].SetActive(true);
                if (!woodPlanksLastFrame[i]) {GameManager.instance.PlaySoundGlobal(woodBuild);}
                woodPlanksLastFrame[i] = true;
            }
            else { if (woodPlanksLastFrame[i]) {GameManager.instance.PlaySoundGlobal(woodBreak);} woodPlanksLastFrame[i] = false; }
        }
        #endregion
    }
}
